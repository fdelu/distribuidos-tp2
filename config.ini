[DEFAULT]
# Address of the RabbitMQ host (for all except client)
RabbitHost = rabbitmq
# DEBUG, INFO, WARNING, ERROR, CRITICAL
LogLevel = INFO
# Number of messages to prefetch from RabbitMQ
# (for all except input and client)
PrefetchCount = 2


# For parsers, joiners & aggregators
FiltersExchangeBase = filters
FiltersQueueBase = filters_{host_id}
FiltersRoutingKeysFormat = ["check_processed_response.{host_id}", "check_processed"] 

# CLIENT

[client]
BatchSize = 6000
# Address of the input host
InputAddress = tcp://input:5555
# Address of the output host
OutputAddress = tcp://output:5555
# Path to the data directory
DataPath = /tmp/data/reduced
# Path to the results directory
ResultsPath = /tmp/results

# --------------------    INPUT    --------------------

[input]
# Address to bind to
Address = tcp://*:5555

# Middleware settings
OutExchange = ${parsers:InExchange}
OutBatchsQueues = { "${parsers:InBatchsQueueFormat}": ["{job_id}.raw_batch"] }

# --------------------   PARSERS   --------------------

[parsers]

# Middleware settings
InExchange = raw_records
FiltersExchange = parsers_${DEFAULT:FiltersExchangeBase}
FiltersQueueFormat = parsers_${DEFAULT:FiltersQueueBase}
InBatchsQueueFormat = raw_batchs_{job_id}
InOthersQueueFormat = parser_others_{host_id}
InOthersQueueRoutingKeys = ["*.start", "*.end"]
OutExchange = basic_records
OutQueues = {
        "${joiners.rain:InTripsQueueFormat}": ["{job_id}.trip.#"],
        "${joiners.year:InTripsQueueFormat}": ["{job_id}.trip.*.${joiners.year:YearBase}", "{job_id}.trip.*.${joiners.year:YearCompared}"],
        "${joiners.city:InTripsQueueFormat}": ["{job_id}.trip.${joiners.city:City}.*"]
    }

# --------------------   JOINERS   --------------------
[joiners]

# Middleware settings
InExchange = basic_records
FiltersExchangeBase = joiners_${DEFAULT:FiltersExchangeBase}
FiltersQueueBase = joiners_${DEFAULT:FiltersQueueBase}
InTripsQueueBase = basic_trips_{job_id}
InOthersQueueBase = joiner_others_{host_id}
InOthersQueueRoutingKeysBase = "*.start", "*.end"
OutExchangeBase = ${aggregators:InExchangeBase}

    [joiners.rain]
    # Drop trips on days with less than this mm of rain
    PrecipitationThreshold = 30

    # Middleware settings
    FiltersExchange = rain_${joiners:FiltersExchangeBase}
    FiltersQueueFormat = rain_${joiners:FiltersQueueBase}
    InTripsQueueFormat = rain_${joiners:InTripsQueueBase}
    InOthersQueueFormat = rain_${joiners:InOthersQueueBase}
    InOthersQueueRoutingKeys = [${joiners:InOthersQueueRoutingKeysBase}, "*.weather.#"]
    OutExchange = rain_${joiners:OutExchangeBase} 
    OutQueues = { "${aggregators.rain:InTripsQueueFormat}": ["{job_id}.trip"] }

    [joiners.year]
    # Base year for comparison
    YearBase = 2016
    # Year to compare to the base year
    YearCompared = 2017

    # Middleware settings
    FiltersExchange = year_${joiners:FiltersExchangeBase}
    FiltersQueueFormat = year_${joiners:FiltersQueueBase}
    InTripsQueueFormat = year_${joiners:InTripsQueueBase}
    InOthersQueueFormat = year_${joiners:InOthersQueueBase}
    InOthersQueueRoutingKeys = [${joiners:InOthersQueueRoutingKeysBase}, "*.station.*.${YearBase}", "*.station.*.${YearCompared}"]
    OutExchange = year_${joiners:OutExchangeBase} 
    OutQueues = { "${aggregators.year:InTripsQueueFormat}": ["{job_id}.trip"] }

    [joiners.city]
    # City to filter on
    City = montreal

    # Middleware settings
    FiltersExchange = city_${joiners:FiltersExchangeBase}
    FiltersQueueFormat = city_${joiners:FiltersQueueBase}
    InTripsQueueFormat = city_${joiners:InTripsQueueBase}
    InOthersQueueFormat = city_${joiners:InOthersQueueBase}
    InOthersQueueRoutingKeys = [${joiners:InOthersQueueRoutingKeysBase}, "*.station.${City}.*"]
    OutExchange = city_${joiners:OutExchangeBase} 
    OutQueues = { "${aggregators.city:InTripsQueueFormat}": ["{job_id}.trip"] }

# -------------------- AGGREGATORS --------------------
[aggregators]
# Interval at which to send the aggregated data
SendIntervalSeconds = 10

# Middleware settings
InExchangeBase = joined_records
FiltersExchangeBase = aggregators_${DEFAULT:FiltersExchangeBase}
FiltersQueueBase = aggregators_${DEFAULT:FiltersQueueBase}
InTripsQueueBase = joined_trips_{job_id}
InOthersQueueBase = aggregator_others_{host_id}
InOthersQueueRoutingKeys = ["*.start", "*.end"]
OutExchange = ${reducers:InExchange}

    [aggregators.rain]
    # Middleware settings
    InExchange = rain_${aggregators:InExchangeBase}
    FiltersExchange = rain_${aggregators:FiltersExchangeBase}
    FiltersQueueFormat = rain_${aggregators:FiltersQueueBase}
    InTripsQueueFormat = rain_${aggregators:InTripsQueueBase}
    InOthersQueueFormat = rain_${aggregators:InOthersQueueBase}
    OutQueue = ${reducers.rain:InQueue}
    
    [aggregators.year]
    YearBase = ${joiners.year:YearBase}
    YearCompared = ${joiners.year:YearCompared}

    # Middleware settings
    InExchange = year_${aggregators:InExchangeBase}
    FiltersExchange = year_${aggregators:FiltersExchangeBase}
    FiltersQueueFormat = year_${aggregators:FiltersQueueBase}
    InTripsQueueFormat = year_${aggregators:InTripsQueueBase}
    InOthersQueueFormat = year_${aggregators:InOthersQueueBase}
    OutQueue = ${reducers.year:InQueue}

    [aggregators.city]
    # Middleware settings
    InExchange = city_${aggregators:InExchangeBase}
    FiltersExchange = city_${aggregators:FiltersExchangeBase}
    FiltersQueueFormat = city_${aggregators:FiltersQueueBase}
    InTripsQueueFormat = city_${aggregators:InTripsQueueBase}
    InOthersQueueFormat = city_${aggregators:InOthersQueueBase}
    OutQueue = ${reducers.city:InQueue}


# --------------------  REDUCERS   --------------------
[reducers]

# Middleware settings
# No exchange for reducers, just the default nameless one
InExchange = 
InQueueBase = aggregated
OutExchange = ${output:InExchange}
OutQueue = ${output:InQueue}

    [reducers.rain]
    AggregatorsCount = ${RAIN_AGGREGATORS_SCALE}

    # Middleware settings
    InQueue = rain_${reducers:InQueueBase}

    [reducers.year]
    # Factor to filter with. Keeps stations if (Trips in compared year) > Factor * (Trips in base year) 
    Factor = 2
    AggregatorsCount = ${YEAR_AGGREGATORS_SCALE}

    # Middleware settings
    InQueue = year_${reducers:InQueueBase}

    [reducers.city]
    # Minimum distance between stations in km to filter on
    MinDistanceKm = 6
    AggregatorsCount = ${CITY_AGGREGATORS_SCALE}
    
    # Middleware settings
    InQueue = city_${reducers:InQueueBase}

# --------------------   OUTPUT    --------------------

[output]
# Address to bind to
Address = tcp://*:5555

# Middleware settings
InExchange = 
InQueue = stats

