[DEFAULT]
# Address of the RabbitMQ host (for all except client)
RabbitHost = rabbitmq
# DEBUG, INFO, WARNING, ERROR, CRITICAL
LogLevel = INFO
# Number of messages to prefetch from RabbitMQ
# (for all except input and client)
PrefetchCount = 50

# CLIENT

[client]
BatchSize = 1000
# Address of the input host
InputAddress = tcp://input:5555
# Address of the output host
OutputAddress = tcp://output:5555
# Path to the data directory
DataPath = /tmp/data/reduced
# Path to the results directory
ResultsPath = /tmp/results

# --------------------    INPUT    --------------------

[input]
BatchSize = 3000
# Address to bind to
Address = tcp://*:5555

# Middleware settings
OutExchange = ${parsers:InExchange}
OutBatchsQueues = { "${parsers:InBatchsQueueFormat}": ["raw_batch"] }

# --------------------   PARSERS   --------------------

[parsers]

# Middleware settings
InExchange = raw_records
InBatchsQueueFormat = raw_batchs_{job_id}
InEndsQueueFormat = parser_ends_{host_id}
OutExchange = basic_records
OutTripsQueues = {
        "${joiners.rain:InTripsQueueFormat}": "${joiners.rain:InTripsRoutingKeys}",
        "${joiners.year:InTripsQueueFormat}": "${joiners.year:InTripsRoutingKeys}",
        "${joiners.city:InTripsQueueFormat}": "${joiners.city:InTripsRoutingKeys}"
    }

# --------------------   JOINERS   --------------------
[joiners]
ParsersCount = ${PARSERS_SCALE}

# Middleware settings
InExchange = basic_records
InTripsQueueBase = basic_trips_{job_id}
InOtherQueueBase = joiner_other_{host_id}
OutExchangeBase = joined_records
InOtherRoutingKeysBase = "*.trips_start", "*.end"

    [joiners.rain]
    # Drop trips on days with less than this mm of rain
    PrecipitationThreshold = 30

    # Middleware settings
    InTripsQueueFormat = rain_${joiners:InTripsQueueBase}
    InOtherQueueFormat = rain_${joiners:InOtherQueueBase}
    OutExchange = rain_${joiners:OutExchangeBase} 
    InTripsRoutingKeys = ["{job_id}.trip.#"]
    InOtherRoutingKeys = [${joiners:InOtherRoutingKeysBase}, "*.weather.#"]

    [joiners.year]
    # Base year for comparison
    YearBase = 2016
    # Year to compare to the base year
    YearCompared = 2017

    # Middleware settings
    InTripsQueueFormat = year_${joiners:InTripsQueueBase}
    InOtherQueueFormat = year_${joiners:InOtherQueueBase}
    OutExchange = year_${joiners:OutExchangeBase} 
    InTripsRoutingKeys = ["{job_id}.trip.*.${YearBase}", "{job_id}.trip.*.${YearCompared}"]
    InOtherRoutingKeys = [${joiners:InOtherRoutingKeysBase}, "*.station.*.${YearBase}", "*.station.*.${YearCompared}"]

    [joiners.city]
    # City to filter on
    City = montreal

    # Middleware settings
    InTripsQueueFormat = city_${InTripsQueueBase}
    InOtherQueueFormat = city_${InOtherQueueBase}
    OutExchange = city_${OutExchangeBase} 
    InTripsRoutingKeys = ["{job_id}.trip.${City}.*"]
    InOtherRoutingKeys = [${joiners:InOtherRoutingKeysBase}, "*.station.${City}.*"]

# -------------------- AGGREGATORS --------------------

[aggregators.rain]
# Interval at which to send the aggregated data
SendIntervalSeconds = 10
JoinersCount = ${RAIN_JOINERS_SCALE}

[aggregators.year]
SendIntervalSeconds = 10
YearBase = ${joiners.year:YearBase}
YearCompared = ${joiners.year:YearCompared}
JoinersCount = ${YEAR_JOINERS_SCALE}

[aggregators.city]
SendIntervalSeconds = 10
JoinersCount = ${CITY_JOINERS_SCALE}

# --------------------  REDUCERS   --------------------

[reducers.rain]
AggregatorsCount = ${RAIN_AGGREGATORS_SCALE}

[reducers.year]
# Factor to filter with. Keeps stations if (Trips in compared year) > Factor * (Trips in base year) 
Factor = 2
AggregatorsCount = ${YEAR_AGGREGATORS_SCALE}

[reducers.city]
# Minimum distance between stations in km to filter on
MinDistanceKm = 6
AggregatorsCount = ${CITY_AGGREGATORS_SCALE}

# --------------------   OUTPUT    --------------------

[output]
# Address to bind to
Address = tcp://*:5555

